{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT19, ratio18_1, false);\nmotor leftMotorB = motor(PORT14, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT13, ratio18_1, true);\nmotor rightMotorB = motor(PORT18, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT15);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor catapultMotorsMotorA = motor(PORT20, ratio18_1, true);\nmotor catapultMotorsMotorB = motor(PORT11, ratio18_1, false);\nmotor_group catapultMotors = motor_group(catapultMotorsMotorA, catapultMotorsMotorB);\n\nmotor feederMotor = motor(PORT12, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\nmotor elevationMotor = motor(PORT10, ratio18_1, false);\n\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control catapultMotors\n      if (Controller1.ButtonL1.pressing()) {\n        catapultMotors.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        catapultMotors.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        catapultMotors.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control feederMotor\n      if (Controller1.ButtonR1.pressing()) {\n        feederMotor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        feederMotor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        feederMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control elevationMotor\n      if (Controller1.ButtonX.pressing()) {\n        elevationMotor.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        elevationMotor.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        elevationMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project: skills challenge 30410V 마주니어피콜로                                                \n//    Author: Sunmyoung Yun\n//    Created: 2024\n//    Configuration:competition code final version        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n#include \"vex.h\"\nusing namespace vex;\n\n//function definitions\nvoid changeHeadingAngle(float targetAngle) {\n  Brain.Timer.clear(); \n  const float pGain = 0.9f; \n  float error = targetAngle - DrivetrainInertial.heading(degrees);\n  float robotTurnPercentage = 0.0f;\n\n  while (fabs(error) > 1) {\n    error = targetAngle - DrivetrainInertial.heading(degrees);\n\n    //wrap error to stay within 360 degrees \n    if (error > 180.0) {\n      error -= 360.0;\n    } else if (error < -180.0) {\n      error += 360.0;\n    }\n    robotTurnPercentage = error * pGain;\n    \n    //calculate target direction every time\n    bool targetRight = error <= 180.0; \n    \n    if (targetRight) {\n      robotTurnPercentage *= -1; \n    }    \n    if(Brain.Timer.time(seconds) > 1.0)\n      return;\n\n    Drivetrain.setTurnVelocity(robotTurnPercentage, percent);\n    Drivetrain.turn(left); \n    wait(5, msec); \n  }\n  Drivetrain.setStopping(brake); \n  Drivetrain.stop();\n\n  printf(\"angle set complete!\\n\"); \n}\n\nvoid correctedMove(directionType direction, int distanceInput, distanceUnits unit){\n  const float offSet = 1.25f;\n  Drivetrain.driveFor(direction, distanceInput * offSet, unit);\n  Drivetrain.stop(); \n}\n\nvoid spinFeeder(){\n  Brain.Timer.clear();\n  while(Brain.Timer.time(seconds) < 0.8){\n    feederMotor.spin(reverse); \n  }\n  feederMotor.stop();\n  feederMotor.setStopping(brake); \n}\n\n//start project code \nvoid preAutonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  calibrateDrivetrain();  \n\n  //motor configurations\n  feederMotor.setVelocity(100, percent);\n  feederMotor.setMaxTorque(100, percent); \n  catapultMotors.setVelocity(70, percent); \n  catapultMotors.setMaxTorque(100, percent);\n  Drivetrain.setDriveVelocity(100, percent); \n\n  wait(5, msec);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n\n  Brain.Timer.clear();\n  while(Brain.Timer.time(seconds) < 0.5){\n    elevationMotor.spin(forward);\n  }\n  elevationMotor.stop(); \n\n   Brain.Timer.clear();\n  while(Brain.Timer.time(seconds) < 0.5){\n    feederMotor.spin(forward);\n  }\n  feederMotor.stop(); \n\n  changeHeadingAngle(315.0);\n  correctedMove(forward, 462, mm);\n  changeHeadingAngle(341);\n  spinFeeder(); \n  printf(\"spit out\\n\");\n\n  correctedMove(reverse, 90, mm); \n  changeHeadingAngle(149);\n  printf(\"changed angle\\n\");\n  correctedMove(forward, 35, mm); \n\n  correctedMove(reverse, 370, mm); \n\n  correctedMove(forward, 500, mm);\n  printf(\"returns\\n\");\n  changeHeadingAngle(120);\n  correctedMove(forward, 300, mm); \n  changeHeadingAngle(90);\n  correctedMove(forward, 410, mm); \n\n  Brain.Timer.clear();\n  while(Brain.Timer.time(seconds) < 0.5){\n    feederMotor.spin(reverse); \n  }\n  feederMotor.stop(); \n\n  correctedMove(reverse, 100, mm); \n}\n\nvoid userControl(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"user control code\");\n\n  while (true) {\n    wait(5, msec);\n    catapultMotors.setStopping(hold); \n    elevationMotor.setStopping(hold); \n  }\n}\n\nint main() {\n  competition Competition;\n\n  preAutonomous();\n\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[19,14,13,18,15],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[20,11],"name":"catapultMotors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[12],"name":"feederMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"catapultMotors","leftDir":"true","right":"feederMotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"elevationMotor","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[10],"name":"elevationMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}